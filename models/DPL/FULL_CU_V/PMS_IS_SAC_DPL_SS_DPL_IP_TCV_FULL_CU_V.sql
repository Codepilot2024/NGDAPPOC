{{ config(
    schema=var('PS_DB_IS_ORA_SCM_v0001.$ORA_SCM_SAC') ,
    materialized='incremental',
    pre_hook='CALL {{ var("PS_DB_IS_ORA_SCM_v0001.$ORA_SCM_SAC") }}.proc_truncate_table(\'{{ var("PS_DB_IS_ORA_SCM_v0001.$ORA_SCM_SAC") }}\',\'PMS_IS_SAC_DPL_SS_DPL_IP_TCV_FULL_CU_V\')'
) }}

  
select ((('DPL' || '|') || 'IP_TCV_FULL_CU') || '|') || ((((TC_OBJ_INSTANCE_KEY_3 || '&') || TC_OBJ_INSTANCE_KEY_2) || '&') || TC_OBJ_INSTANCE_KEY_1) as IP_SUP_KEY, 'DPL' as MSTR_SRC_STM_CD, 'IP_TCV_FULL_CU' as ENT_TP_CD, (((TC_OBJ_INSTANCE_KEY_3 || '&') || TC_OBJ_INSTANCE_KEY_2) || '&') || TC_OBJ_INSTANCE_KEY_1 as MSTR_SRC_STM_KEY, 'DPL' as SRC_STM_CD, 'N' as DEL_IN_SRC_STM_IND, {{ parse_datetime(var("pm_pcs_period")) }}  as VLD_FROM_TMS, {{ var("pm_pcs_id") }}  as PCS_ISRT_ID, CURRENT_DATETIME as ISRT_TMS, SRC_INSTN_ID as SRC_INSTN_ISRT_ID, TC_OBJ_INSTANCE_KEY_1 as TC_OBJ_INSTANCE_KEY_1, TC_OBJ_INSTANCE_KEY_2 as TC_OBJ_INSTANCE_KEY_2, TC_OBJ_INSTANCE_KEY_3 as TC_OBJ_INSTANCE_KEY_3, TC_DATA_TYPE_CHAR_IND as TC_DATA_TYPE_CHAR_IND_CHANGED_NAME, TC_DATA_TYPE_NCHAR_CD as TC_DATA_TYPE_NCHAR_CD, TC_DATA_TYPE_VARCHAR_NM as TC_DATA_TYPE_VARCHAR_NM, TC_DATA_TYPE_NVARCHAR_DSC as TC_DATA_TYPE_NVARCHAR_DSC, TC_DATA_TYPE_INTEGER_RTO as TC_DATA_TYPE_INTEGER_RTO, TC_DATA_TYPE_SMALLINT_NBR as TC_DATA_TYPE_SMALLINT_NBR, TC_DATA_TYPE_BIGINT_PCT as TC_DATA_TYPE_BIGINT_PCT, TC_DATA_TYPE_DECIMAL_AMT as TC_DATA_TYPE_DECIMAL_AMT, TC_DATA_TYPE_BOOLEAN_F as TC_DATA_TYPE_BOOLEAN_F, TC_DATA_TYPE_TIMESTAMP_TMS as TC_DATA_TYPE_TIMESTAMP_TMS, TC_DATA_TYPE_DATE_DT as TC_DATA_TYPE_DATE_DT, 
TC_DATA_TYPE_TIME_TM as TC_DATA_TYPE_TIME_TM, TC_FK_CL_1_KEY_1 as TC_FK_CL_1_KEY_1, TC_FK_CL_1_KEY_2 as TC_FK_CL_1_KEY_2,  CASE WHEN (TC_FK_CL_2_KEY is null ) THEN (' ') ELSE (TC_FK_CL_2_KEY) END as TC_FK_CL_2_KEY, TC_FK_EV_I_KEY as TC_FK_EV_I_KEY, TC_EDC_ATTR_SPLIT as TC_EDC_ATTR_SPLIT, TC_EDC_ATTR_CONVERGE_1 as TC_EDC_ATTR_CONVERGE_1, TC_EDC_ATTR_CONVERGE_2 as TC_EDC_ATTR_CONVERGE_2, ((('DPL|' || 'CL_CV|') || TRIM( TC_FK_CL_1_KEY_1)) || '.') || TRIM( TC_FK_CL_1_KEY_2) as TC_FK_1_CL_SUP_KEY,  CASE WHEN (TC_FK_CL_2_KEY is not null ) THEN ((('DPL|' || 'CL_CV|') || 'ST_TP.') || TRIM( TC_FK_CL_2_KEY)) ELSE ((('DPL|' || 'CL_CV|') || 'ST_TP.') ||  CASE WHEN (TC_FK_CL_2_KEY is null ) THEN ('') ELSE (TC_FK_CL_2_KEY) END) END as TC_FK_2_CL_SUP_KEY,  CASE WHEN (TC_FK_EV_I_KEY is not null ) THEN (('DPL|' || 'EV_TCI_DELTA_C_I|') || TRIM(TRAILING FROM TC_FK_EV_I_KEY)) ELSE (('DPL|' || 'EV_TCI_DELTA_C_I|') ||  CASE WHEN (TC_FK_EV_I_KEY is null ) THEN ('') ELSE (TC_FK_EV_I_KEY) END) END as TC_FK_EV_I_SUP_KEY, SUBSTR(TC_EDC_ATTR_SPLIT,1,(INSTR(TC_EDC_ATTR_SPLIT,' ',1,1) - 1)) as TC_SPLIT_ATTR_1_EDC, SUBSTR(TC_EDC_ATTR_SPLIT,INSTR(TC_EDC_ATTR_SPLIT,' ',1,2 - 1) + 1,(INSTR(TC_EDC_ATTR_SPLIT,' ',1,2) - INSTR(TC_EDC_ATTR_SPLIT,' ',1,2 - 1)) - 1) as TC_SPLIT_ATTR_2_EDC, (TC_EDC_ATTR_CONVERGE_1 || ' , ') || TC_EDC_ATTR_CONVERGE_2 as TC_CONVERGE_ATTR_EDC 
from  
(SELECT
    SRC_INSTN_ID
  , TC_EXCLUDE_FIELD
  , TC_OBJ_INSTANCE_KEY_1
  , TC_OBJ_INSTANCE_KEY_2
  , TC_OBJ_INSTANCE_KEY_3
  , TC_DATA_TYPE_CHAR_IND
  , TC_DATA_TYPE_NCHAR_CD
  , TC_DATA_TYPE_VARCHAR_NM
  , TC_DATA_TYPE_NVARCHAR_DSC
  , TC_DATA_TYPE_INTEGER_RTO
  , TC_DATA_TYPE_SMALLINT_NBR
  , TC_DATA_TYPE_BIGINT_PCT
  , TC_DATA_TYPE_DECIMAL_AMT
  , TC_DATA_TYPE_BOOLEAN_F
  , TC_DATA_TYPE_TIMESTAMP_TMS
  , TC_DATA_TYPE_DATE_DT
  , TC_DATA_TYPE_TIME_TM
  , TC_FK_CL_1_KEY_1
  , TC_FK_CL_1_KEY_2
  , TC_FK_CL_2_KEY
  , TC_FK_EV_I_KEY
  , TC_EDC_ATTR_SPLIT
  , TC_EDC_ATTR_CONVERGE_1
  , TC_EDC_ATTR_CONVERGE_2
FROM (
SELECT
  instn.SRC_INSTN_ID
  , src.TC_EXCLUDE_FIELD
  , src.TC_OBJ_INSTANCE_KEY_1
  , src.TC_OBJ_INSTANCE_KEY_2
  , src.TC_OBJ_INSTANCE_KEY_3
  , src.TC_DATA_TYPE_CHAR_IND
  , src.TC_DATA_TYPE_NCHAR_CD
  , src.TC_DATA_TYPE_VARCHAR_NM
  , src.TC_DATA_TYPE_NVARCHAR_DSC
  , src.TC_DATA_TYPE_INTEGER_RTO
  , src.TC_DATA_TYPE_SMALLINT_NBR
  , src.TC_DATA_TYPE_BIGINT_PCT
  , src.TC_DATA_TYPE_DECIMAL_AMT
  , src.TC_DATA_TYPE_BOOLEAN_F
  , src.TC_DATA_TYPE_TIMESTAMP_TMS
  , src.TC_DATA_TYPE_DATE_DT
  , src.TC_DATA_TYPE_TIME_TM 
  , src.TC_FK_CL_1_KEY_1
  , src.TC_FK_CL_1_KEY_2
  , src.TC_FK_CL_2_KEY
  , src.TC_FK_EV_I_KEY
  , src.TC_EDC_ATTR_SPLIT
  , src.TC_EDC_ATTR_CONVERGE_1
  , src.TC_EDC_ATTR_CONVERGE_2
FROM {{ source('pms_stg', 'PMS_IS_STG_IP_TCV_FULL_CU_V') }} src
-- Get the instance ID of the last successful interface load for the processing period
CROSS JOIN (
	SELECT
		MAX(SRC_INSTN_ID) AS SRC_INSTN_ID
	FROM {{ source('pms_ctl', 'CTL_SRC_INSTN_LOG') }}
	WHERE
	    SRC_NM = 'EXA_FULL_CU'
	    AND SRC_INSTN_TMS = {{ parse_datetime(var("pm_pcs_period")) }}
	) instn )) BALOP_1) BALOP_2